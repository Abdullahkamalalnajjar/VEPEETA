// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vepeeta.infrustructure.DbContext;

#nullable disable

namespace Vepeeta.infrustructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250420003814_Add2Table")]
    partial class Add2Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.BaseServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasDiscriminator<string>("ServiceType").HasValue("BaseServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.ClincsImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClincsImages");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.ClinicServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseServicesId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BaseServicesId");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinics_WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Clinics_WorkingHours");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.DoctorCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorCertificate");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.DoctorService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("DoctorServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MedicalServices.MedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.MobileVanService.VanServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseServicesId")
                        .HasColumnType("int");

                    b.Property<string>("VanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BaseServicesId");

                    b.HasIndex("VanId");

                    b.ToTable("VanServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.VanWorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<string>("VanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VanId");

                    b.ToTable("VanWorkingHours");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Rateing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Rateing");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.Identity.User");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Clinic_Latitude");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Clinic_Longitude");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Clinic");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.Boarding", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("Boarding");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.GroomingBird", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("GroomingBird");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.GroomingCat", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("GroomingCat");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.GroomingDog", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("GroomingDog");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.HealthCareService", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("HealthCare");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.LaboratoryTests", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("LaboratoryTests");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.SpecialtyServices", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("SpecialtyServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.Surgery", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("Surgery");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.Vaccinations", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("Vaccinations");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.Doctor", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.Identity.User");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Doctor_Address");

                    b.Property<string>("ConsultationFees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MedicalCollege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalLicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalPracticeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfClinicOrHospital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotosOfMedicalLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isAudioCallAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("isVideoCallAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("isVisitHomeAvailable")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.PetOwner", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.Identity.User");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnimalBornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnimalCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnimalGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnimalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Animalname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FristName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReproductiveStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("sensitivity")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PetOwner");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.MobileVanService.VanHealthCareService", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.BaseServices");

                    b.HasDiscriminator().HasValue("VanHealthCare");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.Van", b =>
                {
                    b.HasBaseType("Vepeeta.Data.Entity.Identity.User");

                    b.Property<string>("CommercialRegistrationLicensePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Van_FullName");

                    b.Property<bool>("IsGroomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeterinarian")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeterinaryLicensePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Van");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vepeeta.Data.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.ClincsImage", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Clinics.Clinic", "Clinics")
                        .WithMany("ImageUrls")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic_Services.ClinicServices", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.BaseServices", "BaseServices")
                        .WithMany("ClinicServices")
                        .HasForeignKey("BaseServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vepeeta.Data.Entity.Identity.Clinics.Clinic", "Clinic")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseServices");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinics_WorkingHours", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Clinics.Clinic", "Clinic")
                        .WithMany("WorkingHours")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.DoctorCertificate", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Doctor.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.DoctorService", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Doctor.Doctor", "Doctor")
                        .WithMany("DoctorServices")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vepeeta.Data.Entity.MedicalServices.MedicalService", "MedicalService")
                        .WithMany("DoctorServices")
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedicalService");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.WorkingHours", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Doctor.Doctor", "Doctor")
                        .WithMany("WorkHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.MobileVanService.VanServices", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.BaseServices", "BaseServices")
                        .WithMany("VanServices")
                        .HasForeignKey("BaseServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vepeeta.Data.Entity.MobileVan.Van", "Van")
                        .WithMany("VanServices")
                        .HasForeignKey("VanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseServices");

                    b.Navigation("Van");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.VanWorkingHour", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.MobileVan.Van", "Van")
                        .WithMany("WorkingHours")
                        .HasForeignKey("VanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Van");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Rateing", b =>
                {
                    b.HasOne("Vepeeta.Data.Entity.Identity.Doctor.Doctor", "Doctor")
                        .WithMany("Rateing")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.BaseServices", b =>
                {
                    b.Navigation("ClinicServices");

                    b.Navigation("VanServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MedicalServices.MedicalService", b =>
                {
                    b.Navigation("DoctorServices");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Clinics.Clinic", b =>
                {
                    b.Navigation("ClinicServices");

                    b.Navigation("ImageUrls");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.Identity.Doctor.Doctor", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("DoctorServices");

                    b.Navigation("Rateing");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("Vepeeta.Data.Entity.MobileVan.Van", b =>
                {
                    b.Navigation("VanServices");

                    b.Navigation("WorkingHours");
                });
#pragma warning restore 612, 618
        }
    }
}
